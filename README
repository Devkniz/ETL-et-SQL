
# Clinical Data ETL Pipeline - Projet Sanofi

Un pipeline ETL (Extract-Transform-Load) pour nettoyer et stocker des données cliniques dans une base SQLite.

![ETL Flow](https://learn.microsoft.com/fr-fr/azure/architecture/data-guide/images/etl.png)  
*Schéma général du processus ETL*

## 🌟 Fonctionnalités

- **Extraction** depuis un fichier CSV avec gestion d'erreurs robuste
- **Nettoyage** des données invalides et conversion des dates
- **Chargement** automatisé dans une base SQLite
- Logs détaillés avec emojis 📥✅💾
- Chemins de fichiers résistants aux erreurs (via `pathlib`)

## 📋 Prérequis

- Python 3.10+
- Bibliothèques :
  pandas == 2.1.4
  sqlalchemy == 2.0.25
  

## 🚀 Installation

1. Cloner le dépôt :
   git clone git@github.com:Devkniz/ETL-et-SQL.git
   

2. Installer les dépendances :
   pip install -r requirements.txt
   

## 📂 Structure du Projet


projet-sanofi/
├── data/
│   ├── Data Sample for Sanofi(Feuil1).csv  # Fichier source original
│   ├── clinical_data.csv                  # Données brutes extraites
│   ├── cleaned_data.csv                   # Données nettoyées
│   └── clinical_data.db                   # Base SQLite générée
├── src/
│   ├── extract.py
│   ├── transform.py
│   ├── load.py
│   └── pipeline.py                        # Script principal
├── README.md
└── requirements.txt


## 🖥️ Utilisation

Exécuter le pipeline complet 
python src/pipeline.py


**Sortie attendue :**

Démarrage de l'extraction...
📥 Fichier brut généré : data/clinical_data.csv
Extraction réussie !

Nettoyage de données...
✅ 4 lignes valides conservées
Transformation réussie !

Chargement des données...
💾 Base SQLite mise à jour : data/clinical_data.db


## 🔄 Processus ETL

### 1. Extraction (`extract.py`)
- Vérification de l'existence du fichier source
- Lecture du CSV avec encodage Latin-1
- Sauvegarde intermédiaire dans `clinical_data.csv`

### 2. Transformation (`transform.py`)
- Filtre les lignes sans erreurs
- Convertit les dates au format `YYYY-MM-DD`
python
# Exemple de conversion de date
"15/07/2023" ➔ "2023-07-15"


### 3. Chargement (`load.py`)
- Crée une base SQLite si inexistante
- Génère la table `patients` avec remplacement
- Vérification d'intégrité des données

## ✅ Validation des Données

| Étape         | Vérification                     | Outil               |
|---------------|-----------------------------------|---------------------|
| Extraction    | Formattage CSV cohérent          | pandas.read_csv     |
| Transformation| Dates converties & erreurs filtrées | pd.to_datetime   |
| Chargement    | Correspondance des lignes         | SQLite Browser      |

## 🛠️ Développement

Pour exécuter les étapes individuellement 
# Extraction seule
python src/extract.py

# Test de la transformation
python src/transform.py

# Chargement manuel
python src/load.py


## 📈 Améliorations Futures

- [ ] Ajouter des tests unitaires avec pytest
- [ ] Implémenter une logique de reprise sur erreur
- [ ] Dockeriser l'application
- [ ] Ajouter un système de logging détaillé

## 🤝 Contribution

Les contributions sont les bienvenues !  
1. Forker le projet  
2. Créer une branche (`git checkout -b feature/AmazingFeature`)  
3. Commiter vos changements (`git commit -m 'Add some AmazingFeature'`)  
4. Pousser vers la branche (`git push origin feature/AmazingFeature`)  
5. Ouvrir une Pull Request

## 📄 Licence

Distribué sous licence MIT. Voir `LICENSE` pour plus d'informations.

---

**Développé par Terence NDONGO** - *Science des Données Médicales*


